# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tab1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QWidget, QApplication, QLabel, QVBoxLayout, QMessageBox
from PyQt5.QtCore import QDir, pyqtSignal, pyqtSlot, Qt, QThread
from PyQt5.QtGui import QPixmap, QColor
import numpy as np
import os
import cv2
import subprocess
import time
from datetime import datetime
from functions import calibrate, rectification, read_in_ex_param, marker_selection

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 350)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.main_pushButton_REBOOT = QtWidgets.QPushButton(self.centralwidget)
        self.main_pushButton_REBOOT.setGeometry(QtCore.QRect(1125, 45, 125, 125))
        self.main_pushButton_REBOOT.setObjectName("tab_1_pushButton_START")
        self.main_pushButton_REBOOT.clicked.connect(self.remote_reboot)

        self.main_pushButton_SHUTDOWN = QtWidgets.QPushButton(self.centralwidget)
        self.main_pushButton_SHUTDOWN.setGeometry(QtCore.QRect(1125, 180, 125, 125))
        self.main_pushButton_SHUTDOWN.setObjectName("tab_1_pushButton_START")
        self.main_pushButton_SHUTDOWN.clicked.connect(self.remote_shutdown)

        ############################ Tab Widget ##############################
        self.Tab_Widget = QtWidgets.QTabWidget(self.centralwidget)
        self.Tab_Widget.setGeometry(QtCore.QRect(10, 10, 1100, 300)) #left, top, width and height integers
        self.Tab_Widget.setObjectName("Tab_Widget")

        ############################## Tab STATE #################################

        self.tab_0 = QtWidgets.QWidget()
        self.tab_0.setObjectName("tab_0")

        self.tab_0_label_state = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_state.setGeometry(QtCore.QRect(20, 10, 71, 17))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.tab_0_label_state.setFont(font)
        self.tab_0_label_state.setObjectName("tab_0_label_state")

        self.tab_0_comboBox_state = QtWidgets.QComboBox(self.tab_0)
        self.tab_0_comboBox_state.setGeometry(QtCore.QRect(20, 40, 291, 25))
        self.tab_0_comboBox_state.setObjectName("tab_0_comboBox_state")
        self.tab_0_comboBox_state.addItem("")
        self.tab_0_comboBox_state.addItem("")
        self.tab_0_comboBox_state.addItem("")

        self.tab_0_label_FPS = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_FPS.setGeometry(QtCore.QRect(20, 80, 201, 17))
        self.tab_0_label_FPS.setObjectName("tab_0_label_FPS")

        self.tab_0_lineEdit_FPS = QtWidgets.QLineEdit(self.tab_0)
        self.tab_0_lineEdit_FPS.setGeometry(QtCore.QRect(75, 80, 50, 25))
        self.tab_0_lineEdit_FPS.setObjectName("tab_0_lineEdit_FPS")

        self.tab_0_label_FPSrange = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_FPSrange.setGeometry(QtCore.QRect(135, 82, 201, 17))

        font = QtGui.QFont()
        font.setItalic(True)
        self.tab_0_label_FPSrange.setFont(font)
        self.tab_0_label_FPSrange.setObjectName("tab_0_label_FPSrange")

        self.tab_0_label_PFPS = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_PFPS.setGeometry(QtCore.QRect(20, 110, 201, 17))
        self.tab_0_label_PFPS.setObjectName("tab_0_label_MODE")

        self.tab_0_lineEdit_PFPS = QtWidgets.QLineEdit(self.tab_0)
        self.tab_0_lineEdit_PFPS.setGeometry(QtCore.QRect(75, 110, 50, 25))
        self.tab_0_lineEdit_PFPS.setObjectName("tab_0_lineEdit_PFPS")

        self.tab_0_pushButton_state = QtWidgets.QPushButton(self.tab_0)
        self.tab_0_pushButton_state.setGeometry(QtCore.QRect(20, 150, 105, 25))
        self.tab_0_pushButton_state.setObjectName("tab_0_pushButton_state")
        self.tab_0_pushButton_state.clicked.connect(self.state_set)

        self.tab_0_label_currentState = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_currentState.setGeometry(QtCore.QRect(20, 180, 220, 17))
        self.tab_0_label_currentState.setObjectName("tab_0_label_currentState")

        self.tab_0_label_storage = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_storage.setGeometry(QtCore.QRect(490, 20, 400, 17))
        self.tab_0_label_storage.setObjectName("tab_0_label_storage")

        self.tab_0_line_storage = QtWidgets.QFrame(self.tab_0)
        self.tab_0_line_storage.setGeometry(QtCore.QRect(490, 30, 531, 16))
        self.tab_0_line_storage.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_0_line_storage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_0_line_storage.setObjectName("tab_0_line_storage")

        self.tab_0_pushButton_check = QtWidgets.QPushButton(self.tab_0)
        self.tab_0_pushButton_check.setGeometry(QtCore.QRect(490, 50, 89, 25))
        self.tab_0_pushButton_check.setObjectName("tab_0_pushButton_check")
        self.tab_0_pushButton_check.clicked.connect(self.get_ssd_space)

        self.tab_0_label_gps = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_gps.setGeometry(QtCore.QRect(490, 100,400, 17))
        self.tab_0_label_gps.setObjectName("tab_0_label_gps")

        self.tab_0_line_gps = QtWidgets.QFrame(self.tab_0)
        self.tab_0_line_gps.setGeometry(QtCore.QRect(490, 110, 531, 16))
        self.tab_0_line_gps.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_0_line_gps.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_0_line_gps.setObjectName("tab_0_line_gps")

        self.tab_0_pushButton_gps = QtWidgets.QPushButton(self.tab_0)
        self.tab_0_pushButton_gps.setGeometry(QtCore.QRect(490, 130, 89, 25))
        self.tab_0_pushButton_gps.setObjectName("tab_0_pushButton_gps")
        self.tab_0_pushButton_gps.clicked.connect(self.get_gps_status)

        self.tab_0_pushButton_skipgps = QtWidgets.QPushButton(self.tab_0)
        self.tab_0_pushButton_skipgps.setGeometry(QtCore.QRect(590, 130, 89, 25))
        self.tab_0_pushButton_skipgps.setObjectName("tab_0_pushButton_skipgps")
        self.tab_0_pushButton_skipgps.clicked.connect(self.remote_skip_gps)

        self.tab_0_label_clearssd = QtWidgets.QLabel(self.tab_0)
        self.tab_0_label_clearssd.setGeometry(QtCore.QRect(490, 180, 400, 17))
        self.tab_0_label_clearssd.setObjectName("tab_0_label_clearssd")

        self.tab_0_line_clearssd = QtWidgets.QFrame(self.tab_0)
        self.tab_0_line_clearssd.setGeometry(QtCore.QRect(490, 190, 531, 16))
        self.tab_0_line_clearssd.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_0_line_clearssd.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_0_line_clearssd.setObjectName("tab_0_line_clearssd")

        self.tab_0_pushButton_clearssd = QtWidgets.QPushButton(self.tab_0)
        self.tab_0_pushButton_clearssd.setGeometry(QtCore.QRect(490, 210, 89, 25))
        self.tab_0_pushButton_clearssd.setObjectName("tab_0_pushButton_clearssd")
        self.tab_0_pushButton_clearssd.clicked.connect(self.clearssd_popup)

        self.Tab_Widget.addTab(self.tab_0, "")

        ############################## Tab CALIBRATION #################################
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")

        self.tab_1_label_calibration = QtWidgets.QLabel(self.tab_1)
        self.tab_1_label_calibration.setGeometry(QtCore.QRect(20, 10, 311, 17))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.tab_1_label_calibration.setFont(font)
        self.tab_1_label_calibration.setObjectName("tab_1_label_calibration")

        self.tab_1_label_WorkingDir = QtWidgets.QLabel(self.tab_1)
        self.tab_1_label_WorkingDir.setGeometry(QtCore.QRect(20, 40,150, 30))
        self.tab_1_label_WorkingDir.setObjectName("tab_1_label_WorkingDir")

        self.tab_1_lineEdit_WorkingDir = QtWidgets.QLineEdit(self.tab_1)
        self.tab_1_lineEdit_WorkingDir.setGeometry(QtCore.QRect(160, 40, 300, 30))
        self.tab_1_lineEdit_WorkingDir.setObjectName("tab_1_lineEdit_WorkingDir")

        self.tab_1_toolButton_WorkingDir = QtWidgets.QToolButton(self.tab_1)
        self.tab_1_toolButton_WorkingDir.setGeometry(QtCore.QRect(470, 40, 30, 30))
        self.tab_1_toolButton_WorkingDir.setObjectName("tab_1_toolButton_WorkingDir")
        self.tab_1_toolButton_WorkingDir.clicked.connect(lambda: self.getfolder(1))

        self.tab_1_pushButton_Next = QtWidgets.QPushButton(self.tab_1)
        self.tab_1_pushButton_Next.setGeometry(QtCore.QRect(20, 80, 480, 30))
        self.tab_1_pushButton_Next.setObjectName("tab_1_pushButton_Next")
        self.tab_1_pushButton_Next.clicked.connect(self.remote_single_trigger)

        self.tab_1_pushButton_Delete = QtWidgets.QPushButton(self.tab_1)
        self.tab_1_pushButton_Delete.setGeometry(QtCore.QRect(20, 120, 480, 30))
        self.tab_1_pushButton_Delete.setObjectName("tab_1_pushButton_Delete")
        self.tab_1_pushButton_Delete.clicked.connect(self.erase_last_images)

        self.tab_1_label_captureState = QtWidgets.QLabel(self.tab_1)
        self.tab_1_label_captureState.setGeometry(QtCore.QRect(20, 160,480, 30))
        self.tab_1_label_captureState.setObjectName("tab_1_label_captureState")

        self.tab_1_pushButton_Stop = QtWidgets.QPushButton(self.tab_1)
        self.tab_1_pushButton_Stop.setGeometry(QtCore.QRect(20, 190, 480, 30))
        self.tab_1_pushButton_Stop.setObjectName("tab_1_pushButton_Stop")
        self.tab_1_pushButton_Stop.clicked.connect(self.remote_stop_trigger)

        self.tab_1_label_calibrateCameras = QtWidgets.QLabel(self.tab_1)
        self.tab_1_label_calibrateCameras.setGeometry(QtCore.QRect(600, 10, 311, 17))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.tab_1_label_calibrateCameras.setFont(font)
        self.tab_1_label_calibrateCameras.setObjectName("tab_1_label_calibrateCameras")

        self.tab_1_pushButton_startCalibration = QtWidgets.QPushButton(self.tab_1)
        self.tab_1_pushButton_startCalibration.setGeometry(QtCore.QRect(600, 40, 150, 30))
        self.tab_1_pushButton_startCalibration.setObjectName("tab_1_pushButton_startCalibration")
        self.tab_1_pushButton_startCalibration.clicked.connect(self.camera_caibration)

        self.Tab_Widget.addTab(self.tab_1, "")

        ############################## Tab VIDEO AQUISITION #################################
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.tab_2_label_aircraftApproach = QtWidgets.QLabel(self.tab_2)
        self.tab_2_label_aircraftApproach.setGeometry(QtCore.QRect(20, 10, 311, 17))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.tab_2_label_aircraftApproach.setFont(font)
        self.tab_2_label_aircraftApproach.setObjectName("tab_2_label_aircraftApproach")

        self.tab_2_pushButton_videoStart = QtWidgets.QPushButton(self.tab_2)
        self.tab_2_pushButton_videoStart.setGeometry(QtCore.QRect(20, 40, 125, 30))
        self.tab_2_pushButton_videoStart.setObjectName("tab_2_pushButton_videoStart")
        self.tab_2_pushButton_videoStart.clicked.connect(lambda: self.remote_start_trigger(FPS,2))

        self.tab_2_pushButton_videoStop = QtWidgets.QPushButton(self.tab_2)
        self.tab_2_pushButton_videoStop.setGeometry(QtCore.QRect(150, 40, 125, 30))
        self.tab_2_pushButton_videoStop.setObjectName("tab_2_pushButton_videoStop")
        self.tab_2_pushButton_videoStop.clicked.connect(self.remote_stop_trigger)

        self.tab_2_label_dataTransfer = QtWidgets.QLabel(self.tab_2)
        self.tab_2_label_dataTransfer.setGeometry(QtCore.QRect(20, 100,400, 17))
        self.tab_2_label_dataTransfer.setObjectName("tab_2_label_dataTransfer")

        self.tab_2_line_dataTransfer = QtWidgets.QFrame(self.tab_2)
        self.tab_2_line_dataTransfer.setGeometry(QtCore.QRect(20, 110, 530, 16))
        self.tab_2_line_dataTransfer.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_2_line_dataTransfer.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_2_line_dataTransfer.setObjectName("tab_2_line_dataTransfer")

        self.tab_2_pushButton_dataTransfer = QtWidgets.QPushButton(self.tab_2)
        self.tab_2_pushButton_dataTransfer.setGeometry(QtCore.QRect(20, 130, 90, 25))
        self.tab_2_pushButton_dataTransfer.setObjectName("tab_0_pushButton_gps")
        self.tab_2_pushButton_dataTransfer.clicked.connect(self.copy_status)

        self.tab_2_label_captureState = QtWidgets.QLabel(self.tab_2)
        self.tab_2_label_captureState.setGeometry(QtCore.QRect(20, 160,550, 30))
        self.tab_2_label_captureState.setObjectName("tab_2_label_captureState")

        self.Tab_Widget.addTab(self.tab_2, "")

        ############################## Tab RECTIFICATION #################################
        '''
        This tab should be where all formatting of data is done so that it can be used as input into Floris's GUI. It should take the appraoch videos as input
        rectify them, pass the new rectified videos into the the ML model which will produce a csv file containing: pixel co-ordinates in left and right image
        specifying the aircrafts center of mass in the frames, x, y, and z translation of the point in meters from the left camera, and the real-world
        co-ordinates of the aircraft for each frames it is in.
        '''

        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")

        self.tab_3_label_npzFile = QtWidgets.QLabel(self.tab_3)
        self.tab_3_label_npzFile.setGeometry(QtCore.QRect(20, 20,400, 30))
        self.tab_3_label_npzFile.setObjectName("tab_3_label_npzFile")

        self.tab_3_line_npzFile = QtWidgets.QFrame(self.tab_3)
        self.tab_3_line_npzFile.setGeometry(QtCore.QRect(20, 40, 530, 16))
        self.tab_3_line_npzFile.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_3_line_npzFile.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_3_line_npzFile.setObjectName("tab_3_line_npzFile")

        self.tab_3_lineEdit_npzFile = QtWidgets.QLineEdit(self.tab_3)
        self.tab_3_lineEdit_npzFile.setGeometry(QtCore.QRect(20, 60, 300, 30))
        self.tab_3_lineEdit_npzFile.setObjectName("tab_3_lineEdit_npzFile")

        self.tab_3_toolButton_WorkingDir = QtWidgets.QToolButton(self.tab_3)
        self.tab_3_toolButton_WorkingDir.setGeometry(QtCore.QRect(330, 60, 30, 30))
        self.tab_3_toolButton_WorkingDir.setObjectName("tab_3_toolButton_WorkingDir")
        self.tab_3_toolButton_WorkingDir.clicked.connect(lambda: self.getfile(1))

        self.tab_3_label_pairSelction = QtWidgets.QLabel(self.tab_3)
        self.tab_3_label_pairSelction.setGeometry(QtCore.QRect(20, 110,400, 30))
        self.tab_3_label_pairSelction.setObjectName("tab_3_label_pairSelction")

        self.tab_3_line_pairSelction = QtWidgets.QFrame(self.tab_3)
        self.tab_3_line_pairSelction.setGeometry(QtCore.QRect(20, 130, 530, 16))
        self.tab_3_line_pairSelction.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_3_line_pairSelction.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_3_line_pairSelction.setObjectName("tab_3_line_pairSelction")

        self.tab_3_label_left = QtWidgets.QLabel(self.tab_3)
        self.tab_3_label_left.setGeometry(QtCore.QRect(20, 150,400, 30))
        self.tab_3_label_left.setObjectName("tab_3_label_left")

        self.tab_3_label_right = QtWidgets.QLabel(self.tab_3)
        self.tab_3_label_right.setGeometry(QtCore.QRect(20, 190,400, 30))
        self.tab_3_label_right.setObjectName("tab_3_label_right")

        self.tab_3_lineEdit_leftFile = QtWidgets.QLineEdit(self.tab_3)
        self.tab_3_lineEdit_leftFile.setGeometry(QtCore.QRect(70, 150, 300, 30))
        self.tab_3_lineEdit_leftFile.setObjectName("tab_3_lineEdit_leftFile")

        self.tab_3_toolButton_leftFile = QtWidgets.QToolButton(self.tab_3)
        self.tab_3_toolButton_leftFile.setGeometry(QtCore.QRect(380, 150, 30, 30))
        self.tab_3_toolButton_leftFile.setObjectName("tab_3_toolButton_leftFile")
        self.tab_3_toolButton_leftFile.clicked.connect(lambda: self.getfile(2))

        self.tab_3_lineEdit_rightFile = QtWidgets.QLineEdit(self.tab_3)
        self.tab_3_lineEdit_rightFile.setGeometry(QtCore.QRect(70, 190, 300, 30))
        self.tab_3_lineEdit_rightFile.setObjectName("tab_3_lineEdit_rightFile")

        self.tab_3_toolButton_rightFile = QtWidgets.QToolButton(self.tab_3)
        self.tab_3_toolButton_rightFile.setGeometry(QtCore.QRect(380, 190, 30, 30))
        self.tab_3_toolButton_rightFile.setObjectName("tab_3_toolButton_rightFile")
        self.tab_3_toolButton_rightFile.clicked.connect(lambda: self.getfile(3))

        self.tab_3_comboBox_rectMode = QtWidgets.QComboBox(self.tab_3)
        self.tab_3_comboBox_rectMode.setGeometry(QtCore.QRect(70, 235, 300, 25))
        self.tab_3_comboBox_rectMode.setObjectName("tab_3_comboBox_rectMode")
        self.tab_3_comboBox_rectMode.addItem("")
        self.tab_3_comboBox_rectMode.addItem("")
        self.tab_3_comboBox_rectMode.addItem("")

        self.tab_3_pushButton_rectStart = QtWidgets.QPushButton(self.tab_3)
        self.tab_3_pushButton_rectStart.setGeometry(QtCore.QRect(380, 235, 150, 25))
        self.tab_3_pushButton_rectStart.setObjectName("tab_3_pushButton_rectStart")
        self.tab_3_pushButton_rectStart.clicked.connect(self.rect_mode_set)

        self.Tab_Widget.addTab(self.tab_3, "")

        ################################ Tab Markers ########################################

        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")

        self.tab_4_label_npzFile = QtWidgets.QLabel(self.tab_4)
        self.tab_4_label_npzFile.setGeometry(QtCore.QRect(20, 20,400, 30))
        self.tab_4_label_npzFile.setObjectName("tab_4_label_npzFile")

        self.tab_4_line_npzFile = QtWidgets.QFrame(self.tab_4)
        self.tab_4_line_npzFile.setGeometry(QtCore.QRect(20, 40, 530, 16))
        self.tab_4_line_npzFile.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_4_line_npzFile.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_4_line_npzFile.setObjectName("tab_4_line_npzFile")

        self.tab_4_lineEdit_npzFile = QtWidgets.QLineEdit(self.tab_4)
        self.tab_4_lineEdit_npzFile.setGeometry(QtCore.QRect(20, 60, 300, 30))
        self.tab_4_lineEdit_npzFile.setObjectName("tab_4_lineEdit_npzFile")

        self.tab_4_toolButton_WorkingDir = QtWidgets.QToolButton(self.tab_4)
        self.tab_4_toolButton_WorkingDir.setGeometry(QtCore.QRect(330, 60, 30, 30))
        self.tab_4_toolButton_WorkingDir.setObjectName("tab_4_toolButton_WorkingDir")
        self.tab_4_toolButton_WorkingDir.clicked.connect(lambda: self.getfile(4))

        self.tab_4_label_pairSelction = QtWidgets.QLabel(self.tab_4)
        self.tab_4_label_pairSelction.setGeometry(QtCore.QRect(20, 110,400, 30))
        self.tab_4_label_pairSelction.setObjectName("tab_4_label_pairSelction")

        self.tab_4_line_pairSelction = QtWidgets.QFrame(self.tab_4)
        self.tab_4_line_pairSelction.setGeometry(QtCore.QRect(20, 130, 530, 16))
        self.tab_4_line_pairSelction.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_4_line_pairSelction.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_4_line_pairSelction.setObjectName("tab_4_line_pairSelction")

        self.tab_4_label_left = QtWidgets.QLabel(self.tab_4)
        self.tab_4_label_left.setGeometry(QtCore.QRect(20, 150,400, 30))
        self.tab_4_label_left.setObjectName("tab_4_label_left")

        self.tab_4_label_right = QtWidgets.QLabel(self.tab_4)
        self.tab_4_label_right.setGeometry(QtCore.QRect(20, 190,400, 30))
        self.tab_4_label_right.setObjectName("tab_4_label_left")

        self.tab_4_lineEdit_leftFile = QtWidgets.QLineEdit(self.tab_4)
        self.tab_4_lineEdit_leftFile.setGeometry(QtCore.QRect(70, 150, 300, 30))
        self.tab_4_lineEdit_leftFile.setObjectName("tab_4_lineEdit_leftFile")

        self.tab_4_toolButton_leftFile = QtWidgets.QToolButton(self.tab_4)
        self.tab_4_toolButton_leftFile.setGeometry(QtCore.QRect(380, 150, 30, 30))
        self.tab_4_toolButton_leftFile.setObjectName("tab_4_toolButton_leftFile")
        self.tab_4_toolButton_leftFile.clicked.connect(lambda: self.getfile(5))

        self.tab_4_lineEdit_rightFile = QtWidgets.QLineEdit(self.tab_4)
        self.tab_4_lineEdit_rightFile.setGeometry(QtCore.QRect(70, 190, 300, 30))
        self.tab_4_lineEdit_rightFile.setObjectName("tab_4_lineEdit_rightFile")

        self.tab_4_toolButton_rightFile = QtWidgets.QToolButton(self.tab_4)
        self.tab_4_toolButton_rightFile.setGeometry(QtCore.QRect(380, 190, 30, 30))
        self.tab_4_toolButton_rightFile.setObjectName("tab_4_toolButton_rightFile")
        self.tab_4_toolButton_rightFile.clicked.connect(lambda: self.getfile(6))

        self.tab_4_pushButton_markerSelection = QtWidgets.QPushButton(self.tab_4)
        self.tab_4_pushButton_markerSelection.setGeometry(QtCore.QRect(70, 235, 200, 25))
        self.tab_4_pushButton_markerSelection.setObjectName("tab_4_pushButton_markerSelection")
        self.tab_4_pushButton_markerSelection.clicked.connect(self.runway_marker_selection)

        self.Tab_Widget.addTab(self.tab_4, "")

        ############################ tab Machine Learning ##################################

        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")

        self.tab_5_label_WorkingDir = QtWidgets.QLabel(self.tab_5)
        self.tab_5_label_WorkingDir.setGeometry(QtCore.QRect(20, 20,400, 30))
        self.tab_5_label_WorkingDir.setObjectName("tab_5_label_WorkingDir")

        self.tab_5_line_dataFolder = QtWidgets.QFrame(self.tab_5)
        self.tab_5_line_dataFolder.setGeometry(QtCore.QRect(20, 40, 530, 16))
        self.tab_5_line_dataFolder.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_5_line_dataFolder.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_5_line_dataFolder.setObjectName("tab_5_line_dataFolder")

        self.tab_5_lineEdit_WorkingDir = QtWidgets.QLineEdit(self.tab_5)
        self.tab_5_lineEdit_WorkingDir.setGeometry(QtCore.QRect(20, 60, 300, 30))
        self.tab_5_lineEdit_WorkingDir.setObjectName("tab_5_lineEdit_WorkingDir")

        self.tab_5_toolButton_WorkingDir = QtWidgets.QToolButton(self.tab_5)
        self.tab_5_toolButton_WorkingDir.setGeometry(QtCore.QRect(330, 60, 30, 30))
        self.tab_5_toolButton_WorkingDir.setObjectName("tab_4_toolButton_WorkingDir")
        self.tab_5_toolButton_WorkingDir.clicked.connect(lambda: self.getfolder(3))

        self.tab_5_label_npzFile = QtWidgets.QLabel(self.tab_5)
        self.tab_5_label_npzFile.setGeometry(QtCore.QRect(20, 100,400, 30))
        self.tab_5_label_npzFile.setObjectName("tab_5_label_npzFile")

        self.tab_5_line_npzFile = QtWidgets.QFrame(self.tab_5)
        self.tab_5_line_npzFile.setGeometry(QtCore.QRect(20, 120, 530, 16))
        self.tab_5_line_npzFile.setFrameShape(QtWidgets.QFrame.HLine)
        self.tab_5_line_npzFile.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tab_5_line_npzFile.setObjectName("tab_5_line_npzFile")

        self.tab_5_lineEdit_npzFile = QtWidgets.QLineEdit(self.tab_5)
        self.tab_5_lineEdit_npzFile.setGeometry(QtCore.QRect(20, 140, 300, 30))
        self.tab_5_lineEdit_npzFile.setObjectName("tab_5_lineEdit_npzFile")

        self.tab_5_toolButton_npzFile = QtWidgets.QToolButton(self.tab_5)
        self.tab_5_toolButton_npzFile.setGeometry(QtCore.QRect(330, 140, 30, 30))
        self.tab_5_toolButton_npzFile.setObjectName("tab_5_toolButton_npzFile")
        self.tab_5_toolButton_npzFile.clicked.connect(lambda: self.getfile(7))


        self.tab_5_pushButton_StartML = QtWidgets.QPushButton(self.tab_5)
        self.tab_5_pushButton_StartML.setGeometry(QtCore.QRect(20, 200, 200, 25))
        self.tab_5_pushButton_StartML.setObjectName("tab_5_pushButton_StartML")
        self.tab_5_pushButton_StartML.clicked.connect(self.start_ml_model)

        self.Tab_Widget.addTab(self.tab_5, "")

        ####################################################################################

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")

        self.retranslateUi(MainWindow)
        self.Tab_Widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Stereo Vision"))

        #***********Labels
        self.tab_0_label_FPS.setText(_translate("MainWindow", "FPS"))
        self.tab_0_label_FPSrange.setText(_translate("MainWindow", "1 - 15"))
        self.tab_0_label_PFPS.setText(_translate("MainWindow", "PFPS"))
        self.tab_0_label_state.setText(_translate("MainWindow", "State"))
        self.tab_0_label_currentState.setText(_translate("MainWindow", "Current State: "))
        self.tab_0_label_storage.setText(_translate("MainWindow", "Storage Used:"))
        self.tab_0_label_gps.setText(_translate("MainWindow", "Get GPS Status"))
        self.tab_0_label_clearssd.setText(_translate("MainWindow", "Clear SSD"))

        self.tab_1_label_calibration.setText(_translate("MainWindow", "Select images for calibration"))
        self.tab_1_label_WorkingDir.setText(_translate("MainWindow", "Working Directory"))
        self.tab_1_label_calibrateCameras.setText(_translate("MainWindow", "Calibrate Cameras"))

        self.tab_2_label_aircraftApproach.setText(_translate("MainWindow", "Record Aircraft Approach"))
        self.tab_2_label_dataTransfer.setText(_translate("MainWindow", "Check if data Transfer is complete"))

        self.tab_3_label_npzFile.setText(_translate("MainWindow", "Select intrinsic and extrinsic paramter .npz file:"))
        self.tab_3_label_pairSelction.setText(_translate("MainWindow", "Select stereo image or video pair files:"))
        self.tab_3_label_left.setText(_translate("MainWindow", "Left"))
        self.tab_3_label_right.setText(_translate("MainWindow", "Right"))

        self.tab_4_label_npzFile.setText(_translate("MainWindow", "Select intrinsic and extrinsic paramter .npz file:"))
        self.tab_4_label_pairSelction.setText(_translate("MainWindow", "Select stereo image pair files containing runway markers:"))
        self.tab_4_label_left.setText(_translate("MainWindow", "Left"))
        self.tab_4_label_right.setText(_translate("MainWindow", "Right"))

        self.tab_5_label_WorkingDir.setText(_translate("MainWindow", "Select working directory containing the ML model"))
        self.tab_5_label_npzFile.setText(_translate("MainWindow", "Select intrinsic and extrinsic paramter .npz file:"))
        #***********PushButtons

        self.main_pushButton_REBOOT.setText(_translate("MainWindow", "REBOOT"))
        self.main_pushButton_SHUTDOWN.setText(_translate("MainWindow", "SHUTDOWN"))

        self.tab_0_pushButton_state.setText(_translate("MainWindow", "Set State"))
        self.tab_0_pushButton_check.setText(_translate("MainWindow", "Check"))
        self.tab_0_pushButton_gps.setText(_translate("MainWindow", "Status"))
        self.tab_0_pushButton_skipgps.setText(_translate("MainWindow", "Skip"))
        self.tab_0_pushButton_clearssd.setText(_translate("MainWindow", "Clear Data"))

        self.tab_1_pushButton_Next.setText(_translate("MainWindow", "Capture Image Pair"))
        self.tab_1_pushButton_Delete.setText(_translate("MainWindow", "Delete Image Pair"))
        self.tab_1_pushButton_Stop.setText(_translate("MainWindow", "Stop Image Pair Selection"))
        self.tab_1_pushButton_startCalibration.setText(_translate("MainWindow", "Start Calibration"))

        self.tab_2_pushButton_videoStart.setText(_translate("MainWindow", "START"))
        self.tab_2_pushButton_videoStop.setText(_translate("MainWindow", "STOP"))
        self.tab_2_pushButton_dataTransfer.setText(_translate("MainWindow", "Check"))

        self.tab_3_pushButton_rectStart.setText(_translate("MainWindow", "Start Rectification"))

        self.tab_4_pushButton_markerSelection.setText(_translate("MainWindow", "Start marker selction"))

        self.tab_5_pushButton_StartML.setText(_translate("MainWindow", "Start ML model"))

        #***********ToolButtons

        self.tab_1_toolButton_WorkingDir.setText(_translate("MainWindow", "..."))

        self.tab_3_toolButton_WorkingDir.setText(_translate("MainWindow", "..."))
        self.tab_3_toolButton_leftFile.setText(_translate("MainWindow", "..."))
        self.tab_3_toolButton_rightFile.setText(_translate("MainWindow", "..."))

        self.tab_4_toolButton_WorkingDir.setText(_translate("MainWindow", "..."))
        self.tab_4_toolButton_leftFile.setText(_translate("MainWindow", "..."))
        self.tab_4_toolButton_rightFile.setText(_translate("MainWindow", "..."))

        self.tab_5_toolButton_WorkingDir.setText(_translate("MainWindow", "..."))
        self.tab_5_toolButton_npzFile.setText(_translate("MainWindow", "..."))
        #***********Tabs
        self.Tab_Widget.setTabText(self.Tab_Widget.indexOf(self.tab_0), _translate("MainWindow", "State"))
        self.Tab_Widget.setTabText(self.Tab_Widget.indexOf(self.tab_1), _translate("MainWindow", "Calibration"))
        self.Tab_Widget.setTabText(self.Tab_Widget.indexOf(self.tab_2), _translate("MainWindow", "Video Acquisition"))
        self.Tab_Widget.setTabText(self.Tab_Widget.indexOf(self.tab_3), _translate("MainWindow", "Rectification"))
        self.Tab_Widget.setTabText(self.Tab_Widget.indexOf(self.tab_4), _translate("MainWindow", "Markers"))
        self.Tab_Widget.setTabText(self.Tab_Widget.indexOf(self.tab_5), _translate("MainWindow", "ML"))

        #***********ComboBoxses
        self.tab_0_comboBox_state.setItemText(0, _translate("MainWindow", "--  Select State  --"))
        self.tab_0_comboBox_state.setItemText(1, _translate("MainWindow", "Calibration"))
        self.tab_0_comboBox_state.setItemText(2, _translate("MainWindow", "Video Acquisition"))

        self.tab_3_comboBox_rectMode.setItemText(0, _translate("MainWindow", "--  Select rectification mode  --"))
        self.tab_3_comboBox_rectMode.setItemText(1, _translate("MainWindow", "Image pair rectification"))
        self.tab_3_comboBox_rectMode.setItemText(2, _translate("MainWindow", "Video pair rectification"))

        #***********Actions
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As"))
        self.actionSave.setText(_translate("MainWindow", "Save"))


    ##############################  BUTTON FUNCTIONS #################################
    def getfolder(self, but_num):
        response = QFileDialog.getExistingDirectory(
            parent=self,
            caption='Select a folder/directory',
            directory=os.getcwd()

        )

        if response:
            if but_num == 1:
                self.tab_1_lineEdit_WorkingDir.setText(str(response) + '/')
            elif but_num == 3:
                self.tab_5_lineEdit_WorkingDir.setText(str(response) + '/')

    def getfile(self, but_num):
        response = QFileDialog.getOpenFileName(
            parent=self,
            caption='Select a file',
            directory=os.getcwd()
        )

        if response:
            if but_num == 1:
                self.tab_3_lineEdit_npzFile.setText(str(response[0]))
            elif but_num == 2:
                self.tab_3_lineEdit_leftFile.setText(str(response[0]))
            elif but_num == 3:
                self.tab_3_lineEdit_rightFile.setText(str(response[0]))
            elif but_num == 4:
                self.tab_4_lineEdit_npzFile.setText(str(response[0]))
            elif but_num == 5:
                self.tab_4_lineEdit_leftFile.setText(str(response[0]))
            elif but_num == 6:
                self.tab_4_lineEdit_rightFile.setText(str(response[0]))
            elif but_num == 7:
                self.tab_5_lineEdit_npzFile.setText(str(response[0]))

    def display_image_pair(self,num):
        global cv_imgL, cv_imgR
        if num == 1:
            workingDir = self.tab_1_lineEdit_WorkingDir.text()
        elif num == 2:
            workingDir = self.tab_2_lineEdit_WorkingDir.text()

        # load the test image - we really should have checked that this worked!
        cv_imgL = cv2.imread(workingDir + "lft_cam_preview.jpg")
        cv_imgR = cv2.imread(workingDir + "rht_cam_preview.jpg")

        grayR= cv2.cvtColor(cv_imgR,cv2.COLOR_BGR2GRAY)
        grayL= cv2.cvtColor(cv_imgL,cv2.COLOR_BGR2GRAY)

        R_resize = cv2.resize(grayR, (655,490))
        L_resize = cv2.resize(grayL, (655,490))

        cv2.imshow('Left', L_resize)
        cv2.imshow('Right', R_resize)

    def erase_all_data(self, i):
        pressed_button = i.text()
        if pressed_button == '&No':
            pass
        else:
            os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_erase_all_data.sh')

    def erase_last_images(self):
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_erase_last_images.sh')

        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")

        print("image pair deleted - ", current_time)
        self.tab_1_label_captureState.setText("image pair deleted - {}".format(current_time))


    def get_gps_status(self):
        gps_status = subprocess.check_output('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_get_gps_status.sh', shell=True, universal_newlines=True)
        self.tab_0_label_gps.setText("Get GPS Status           {}".format(gps_status))

    def remote_skip_gps(self):
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_skip_gps.sh')
        print('GPS Skipped')

    def get_num_datasets(self):
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/get_num_datasets.sh')
        pass

    def get_ssd_space(self):
        ssd_space = subprocess.check_output('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_get_ssd_space.sh', shell=True, universal_newlines=True)
        self.tab_0_label_storage.setText('Storage Used:           {}'.format(ssd_space))

    def remote_single_trigger(self):
        self.tab_1_label_captureState.setText('Capturing image pair')
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_single_trigger.sh')
        print('Capturing image pair')
        time.sleep(3)

        workingDir = self.tab_1_lineEdit_WorkingDir.text()

        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")

        cv_imgL = cv2.imread(workingDir + "lft_cam_preview.jpg")
        cv_imgR = cv2.imread(workingDir + "rht_cam_preview.jpg")

        grayR= cv2.cvtColor(cv_imgL,cv2.COLOR_BGR2GRAY)
        grayL= cv2.cvtColor(cv_imgR,cv2.COLOR_BGR2GRAY)

        retL, cornersL = cv2.findChessboardCorners(cv_imgL,(4,3),None)
        retR, cornersR = cv2.findChessboardCorners(cv_imgR,(4,3),None)

        if (retR == True) & (retL == True):
            print("image pair captured - Chessboard corners found - ", current_time)
            self.tab_1_label_captureState.setText("image pair captured - Chessboard corners found - {}".format(current_time))
        else:
            print("image pair captured - Chessboard corners NOT found - ", current_time)
            self.tab_1_label_captureState.setText("image pair captured - Chessboard corners NOT found - {}".format(current_time))

        self.display_image_pair(1)

    def remote_start_trigger(self, fps, pfps):
        print("Recording...")
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_start_trigger.sh {} {}'.format(FPS, 2))
        self.tab_2_label_captureState.setText("Recording...")
        #time.sleep(15)
        #self.vid_preview()


    def copy_status(self):
        dataTransfer_status = subprocess.check_output('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_get_copy_status.sh', shell=True, universal_newlines=True) # if "TypeError: __init__() got an unexpected keyword argument 'text'"
        self.tab_2_label_captureState.setText("Data transfer status - {}".format(dataTransfer_status))                                                # occurs use 'universal_newlines=True' instead of 'universal_newlines=True'

    def remote_startup(self, MODE, FPS, PFPS):
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_startup.sh {} {} {}'.format(FPS,MODE,PFPS))

    def remote_stop_trigger(self):
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_stop_trigger.sh')
        print("...Stopped Recording")
        cv2.destroyAllWindows()

        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")

        self.tab_1_label_captureState.setText("Data Acquisition Stopped - Ensure LEDs are off - {}".format(current_time))
        self.tab_2_label_captureState.setText("Data Acquisition Stopped - Ensure LEDs are off - {}".format(current_time))
        self.tab_0_label_currentState.setText("Current State: " + "Idle")

    def remote_shutdown(self):
        print('shutting down')
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_shutdown.sh')

    def remote_reboot(self):
        os.system('./stereo-vision-tracker/shell_scripts/remote_scripts/remote_reboot.sh')
        pass

    def state_set(self):
        global state, FPS, PFPS
        state = self.tab_0_comboBox_state.currentText()

        if state == "Calibration":
            FPS = self.tab_0_lineEdit_FPS.text()
            MODE = 1
            PFPS = self.tab_0_lineEdit_PFPS.text()
            self.tab_0_label_currentState.setText("Current State: " + state)
            self.remote_startup(MODE, FPS, PFPS)

        elif state == "Video Acquisition":
            FPS = self.tab_0_lineEdit_FPS.text()
            MODE = 0
            PFPS = self.tab_0_lineEdit_PFPS.text()
            self.tab_0_label_currentState.setText("Current State: " + state)
            self.remote_startup(MODE, FPS, PFPS)

    def rect_mode_set(self):
        global state, FPS, PFPS
        mode = self.tab_3_comboBox_rectMode.currentText()

        if mode == "Video pair rectification":
            MODE = 1
            L_vid = self.tab_3_lineEdit_leftFile.text()
            R_vid = self.tab_3_lineEdit_rightFile.text()
            npz_file = self.tab_3_lineEdit_npzFile.text()
            rectification(MODE, L_vid, R_vid, npz_file)

        elif mode == "Image pair rectification":
            MODE = 2
            L_img = self.tab_3_lineEdit_leftFile.text()
            R_img = self.tab_3_lineEdit_rightFile.text()
            npz_file = self.tab_3_lineEdit_npzFile.text()
            rectification(MODE, L_img, R_img, npz_file)

    def clearssd_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Clear SSD")
        msg.setText("Are you sure you want to clear the SSD?")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)

        msg.buttonClicked.connect(self.erase_all_data)

        x = msg.exec_()

    def camera_caibration(self):
        workingDir = self.tab_1_lineEdit_WorkingDir.text()
        calibrate(workingDir)

    def runway_marker_selection(self):
        Limg = self.tab_4_lineEdit_leftFile.text()
        Rimg = self.tab_4_lineEdit_rightFile.text()
        in_ex_file = self.tab_4_lineEdit_npzFile.text()
        marker_selection(Limg,Rimg,in_ex_file)

    def start_ml_model(self):
        WorkingDir = self.tab_5_lineEdit_WorkingDir.text()

        #Aircraft Locate Script
        AC_loc = '/stereo-vision-tracker/stereo-vision-tracker/locate_aircraft.py'

        #ML model inputs
        inputFolder = '/stereo-vision-tracker/input/'
        L_rect_vid =  inputFolder + 'lft_rect.avi'
        R_rect_vid =  inputFolder +'rht_rect.avi'
        marker_depth_csv = inputFolder + 'Marker_Depth.csv'
        in_ex_file = inputFolder + self.tab_5_lineEdit_npzFile.text().split('/')[-1]
        print(in_ex_file)
        model =  inputFolder + 'model/model_final.pth'

        #ML model outputs
        outputFolder =  '/stereo-vision-tracker/' + 'output/'
        csv_output =  outputFolder + 'coordinates.csv'
        vid_output =  outputFolder + 'Detect_vid.avi'
        trim_vid_output = outputFolder + 'Trimmed_Left_vid.avi'


        os.system("sudo docker run -it -v {}:/stereo-vision-tracker  --net=host --gpus all stereo-vision-tracker \
                    python {} \
                    --left {} --right {} \
                    --marker_depth {} \
                    --in_ex_param {} \
                    --model {} \
                    --output {} \
                    --video-output {} \
                    --trimmed-video {}".format(WorkingDir,AC_loc, \
                                                L_rect_vid, R_rect_vid, marker_depth_csv, in_ex_file, model, \
                                                csv_output, vid_output, trim_vid_output))
        # os.system("sudo docker run -it -v `pwd`/stereo-vision-tracker:/stereo-vision-tracker --net=host --gpus all stereo-vision-tracker \
        #             python /stereo-vision-tracker/stereo-vision-tracker/locate_aircraft.py \
        #             --left /stereo-vision-tracker/data/lft_rect.avi --right /stereo-vision-tracker/data/rht_rect.avi \
        #             --model /stereo-vision-tracker/model/model_final.pth \
        #             --output /stereo-vision-tracker/data/coordinates.csv \
        #             --video-output /stereo-vision-tracker/data/test_vid.avi \
        #             --trimmed-video /stereo-vision-tracker/data/trimmed_vid.avi \
        #             --marker_depth /stereo-vision-tracker/data/Marker_Depth.csv \
        #             --in_ex_param /stereo-vision-tracker/data/Calib_param_B1.5")

#/stereo-vision-tracker/data:/data -v `pwd`/stereo-vision-tracker/model:/model -v `pwd`/stereo-vision-tracker/stereo-vision-tracker:/stereo-vision-tracker

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

#./stereo-vision-tracker/shell_scripts/remote_scripts/
